package com.bittokazi.oauth2.auth.server.database;

import com.bittokazi.oauth2.auth.server.app.models.master.Tenant;
import com.bittokazi.oauth2.auth.server.app.repositories.master.TenantRepository;
import com.bittokazi.oauth2.auth.server.utils.Utils;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import jakarta.annotation.PostConstruct;
import liquibase.Liquibase;
import liquibase.database.Database;
import liquibase.database.DatabaseFactory;
import liquibase.database.jvm.JdbcConnection;
import liquibase.exception.LiquibaseException;
import liquibase.resource.ClassLoaderResourceAccessor;

import org.hibernate.engine.jdbc.connections.spi.AbstractDataSourceBasedMultiTenantConnectionProviderImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.ApplicationListener;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import javax.sql.DataSource;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

/**
 * MultiTenantConnectionProviderImpl sets up the connection to all the databases
 * for all companies creates a new database for a new company
 *
 *
 * @author Bitto Kazi
 */
@Component
@Transactional(value = "masterTransactionManager", readOnly = true)
@EnableAsync
@EnableCaching
@EnableAspectJAutoProxy(proxyTargetClass = true)
public class MultiTenantConnectionProviderImpl extends AbstractDataSourceBasedMultiTenantConnectionProviderImpl
        implements ApplicationListener<ContextRefreshedEvent> {

    private static final long serialVersionUID = 1L;
    private final static Logger logger = LoggerFactory.getLogger(MultiTenantConnectionProviderImpl.class);
    private Map<String, DataSource> mapCompanyNameDataSource;
    private TenantRepository tenantRepository;
    private DataSource dataSource;

    @Value("${spring.datasource.url}")
    private String url;
    @Value("${spring.datasource.port}")
    private String port;
    @Value("${spring.datasource.dataSourceClassName}")
    private String dataSourceClassName;
    @Value("${spring.datasource.username}")
    private String user;
    @Value("${spring.datasource.password}")
    private String password;
    @Value("${spring.datasource.databaseName}")
    private String databaseName;

    public MultiTenantConnectionProviderImpl(TenantRepository tenantRepository, DataSource dataSource) {
        this.tenantRepository = tenantRepository;
        this.dataSource = dataSource;
    }

    @PostConstruct
    public void load() {
        mapCompanyNameDataSource = new HashMap<>();
    }

    private void init() {
        System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>INIT<<<<<<<<<<<<<<<<ALL<<TENANT<<CONNECTION");
        // in this experiment we are just using one instance of mssql. URL is
        // generated by replacing master database
        // name with company key to get new database URL

        for (Tenant tenant : tenantRepository.findAll()) {
            String schemaExist = "SELECT schema_name FROM information_schema.schemata WHERE schema_name = '"+tenant.getCompanyKey().toLowerCase()+"'";
            PreparedStatement statementSchemaExist = null;
            HikariDataSource dsMainDb = null;
            try {
                HikariConfig configMainDb = Utils.getDbConfig(dataSourceClassName, url, port, databaseName, user, password);
                dsMainDb = new HikariDataSource(configMainDb);
                statementSchemaExist = dsMainDb.getConnection().prepareStatement(schemaExist);
                if(statementSchemaExist.executeQuery().next()) {
                    statementSchemaExist.close();
                    dsMainDb.close();
                    String companySchemaUrl = "";
                    try {
                        companySchemaUrl = url + "?currentSchema=" + tenant.getCompanyKey();
                        logger.info("Configuring datasource {} {} {}", dataSourceClassName, companySchemaUrl, user);
                        HikariConfig config = Utils.getDbConfig(dataSourceClassName, url, port, databaseName, user, password);
                        config.addDataSourceProperty("currentSchema", tenant.getCompanyKey());
                        HikariDataSource ds = new HikariDataSource(config);
                        mapCompanyNameDataSource.put(tenant.getCompanyKey(), ds);

                        // Update database of each tenant with liquibase
                        try {
                            Database database = DatabaseFactory.getInstance()
                                    .findCorrectDatabaseImplementation(new JdbcConnection(ds.getConnection()));
                            Liquibase liquibase = new Liquibase("db-migration/db-tenant-alter.xml", new ClassLoaderResourceAccessor(),
                                    database);
                            liquibase.update("test, production");
                            database.close();
                        } catch (Exception e) {
                            logger.error("ERROR executing liquibase {}", e);
                        }

                        // ds.close();
                    } catch (Exception e) {
                        logger.error("Error in database URL {}", companySchemaUrl, e);
                    }
                } else {
                    //statementSchemaExist.close();
                    logger.error("Shchema Does not Exist>>>>>>>>>>>> "+tenant.getCompanyKey());
                }
            } catch (SQLException e1) {
                // TODO Auto-generated catch block
                try {
                    if(statementSchemaExist!=null) statementSchemaExist.close();
                    if(dsMainDb!=null) dsMainDb.close();
                } catch (SQLException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
                e1.printStackTrace();
            }
        }
    }
    /**
     * setup connection to companyName and add DataSource to
     * mapCompanyNameDataSource
     *
     * @param companyName
     */
    private void establishDBConnectionAndAddToMapping(String companyName) {
        HikariConfig config =	Utils.getDbConfig(dataSourceClassName, url, port, databaseName, user, password);
        config.addDataSourceProperty("currentSchema", companyName);
        HikariDataSource ds = new HikariDataSource(config);
        mapCompanyNameDataSource.put(companyName, ds);
        try {
            Database database = DatabaseFactory.getInstance()
                    .findCorrectDatabaseImplementation(new JdbcConnection(ds.getConnection()));
            Liquibase liquibase = new Liquibase("db-migration/db-tenant.xml", new ClassLoaderResourceAccessor(), database);
            liquibase.update("test, production");
            database.close();
        } catch (Exception e) {
            logger.error("ERROR executing liquibase {}", e);
        }
        // ds.close();
    }

    /**
     * create DB companyName and add it to mapCompanyNameDataSource
     *
     * @param ds
     * @param companyName
     * @throws SQLException
     * @throws LiquibaseException
     */
    private void initDbWithLiquibase(HikariDataSource ds, String companyName) throws SQLException, LiquibaseException {
        Database database = DatabaseFactory.getInstance()
                .findCorrectDatabaseImplementation(new JdbcConnection(ds.getConnection()));
        JdbcConnection databaseConnection = (JdbcConnection) database.getConnection();
        String sql = "CREATE SCHEMA " + companyName;
        PreparedStatement statement = databaseConnection.prepareStatement(sql);
        statement.executeUpdate();
        databaseConnection.commit();
        statement.close();
        databaseConnection.close();
        ds.close();
        establishDBConnectionAndAddToMapping(companyName); // call
    }

    public void singleTenantCreation(Tenant tenant) {
        try {
            HikariConfig config = Utils.getDbConfig(dataSourceClassName, url, port, databaseName, user, password);
            HikariDataSource ds = new HikariDataSource(config);
            initDbWithLiquibase(ds, tenant.getCompanyKey());
        } catch (Exception e) {
            logger.error("Error in database URL {}", url, e);
        }
    }

    @Override
    protected DataSource selectAnyDataSource() {
        logger.debug("######### Selecting any data source");
        return dataSource;
    }

    @Override
    protected DataSource selectDataSource(String tenantIdentifier) {
        logger.debug("+++++++++++ Selecting data source for {}", tenantIdentifier);
        return mapCompanyNameDataSource.containsKey(tenantIdentifier) ? mapCompanyNameDataSource.get(tenantIdentifier)
                : dataSource;
    }

    public DataSource getDataSource(String tenantIdentifier) {
        return selectDataSource(tenantIdentifier);
    }

    @Override
    public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) {
        /** This is super critical to initialize after application is done with
         configuring beans.
         otherwise you can not use companyRepository to fetch all the
         companies
         */
        init();
    }

    public String getUrl() {
        return url;
    }

    public String getUser() {
        return user;
    }

    public String getPassword() {
        return password;
    }

    public String getDataSourceClassName() {
        return dataSourceClassName;
    }

}

